<?php

/**
 *
 * Simple Tree Menu Module
 *
 * @author Soma, with code based by Apeisa, Ryan.
 * https://github.com/somatonic/MarkupSimpleNavigation
 *
 * @date_created 08/03/2012
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */



class MarkupSimpleNavigation extends WireData implements Module {

	public static $defaultOptions = array(
		'parent_class' => 'parent', // string (default 'parent') overwrite class name for current parent levels
		'current_class' => 'current', // string (default 'current') overwrite current class
		'has_children_class' => 'has_children', // string (default 'has_children') overwrite class name for entries with children
		'levels' => false, // bool (default false) wether to output "level-1, level-2, ..." as css class in links
		'levels_prefix' => 'level-', // bool (default 'level-') prefix string that will be used for level class
		'max_levels' => null, // int (default null) set the max level rendered
		'firstlast' => false, // bool (default false) puts last,first class to link items
		'collapsed' => false, // bool (default false) if you want to auto-collapse the tree you set this to true
		'show_root' => false, // bool (default false) set this to true if you want to rootPage to get prepended to the menu
		'selector' => '', // string (default '') define custom PW selector, you may sanitize values from user input
		'outer_tpl' => '<ul>||</ul>', // template string for the outer most wrapper. || will contain entries
		'inner_tpl' => '<ul>||</ul>', // template string for inner wrappers. || will contain entries
		'list_tpl' => '<li%s>||</li>', // template string for the items. || will contain entries, %s will replaced with class="..." string
		'list_field_class' => '', // string (default '') add custom classes to each list_tpl using tags like {field} i.e. {template} p_{id}
		'item_tpl' => '<a href="{url}">{title}</a>', // template string for the inner items. Use {anyfield} and {url}, i.e. {headline|title}, if field is of type image it will return url to image (first image if multiple)
		'item_current_tpl' => '<a href="{url}">{title}</a>', // template string for the current active inner items.
		'xtemplates' => '', // specify templates i.e. "folder|placeholder" for pages that need different output.
		'xitem_tpl' => '<span>{title}</a>',
		'xitem_current_tpl' => '<span>{title}</span>'
	);


	public static function getModuleInfo() {
		return array(
			'title' => "Markup Simple Navigation",
			'summary' => 'Module to render simple nested ul tree of the site structure. See readme for usage and options avaiable.',
			'version' => 119,
			'href' => 'http://processwire.com/talk/topic/1036-markupsimplenavigation/',
			'autoload' => false,
			'singular' => true
		);
	}

	public function init() {
		//$this->fuel->set('treeMenu', $this );
	}

	/**
	*
	*   Init method to render nested menu tree
	*   init tree rendering, merge options with defaults
	*
	*/
	public function render( Array $options = null, Page $page = null, Page $rootPage = null ) {

		$this->set('iteration',0);

		if($options != null && is_array($options)){
			$options = array_merge(self::$defaultOptions, $options);
		} else {
			$options = self::$defaultOptions;
		}
		// level offset of root page
		if($rootPage != null) $offset = count($rootPage->parents);
			else $offset = 0;
		return $this->_renderTree( $options, $page, $rootPage, $offset);
	}


	/**
	*
	*   Render the tree method
	*
	*/
	private function _renderTree( $options, $page, $rootPage, $offset ){

		$this->iteration++;

		if(is_null($page)) $page = wire('page');
		if(is_null($rootPage)) $rootPage = wire('pages')->get('/');

		$parents = $page->parents;
		$offset_root = count($rootPage->parents);

		if($options['show_root'] && $this->iteration == 1) {
			$children = $rootPage->children( $options['selector'] );
			$children->prepend( $rootPage );
		} else {
			$children = $rootPage->children( $options['selector'] );
		}

		// if no children there's no need to go any further
		if( !count($children) ) return;

		$outer_tpl = explode('||',$options['outer_tpl']);
		$inner_tpl = explode('||',$options['inner_tpl']);
		$list_tpl = explode('||',$options['list_tpl']);

		$out = '';

		// output outer tpl wrapper only on first iteration
		if($this->iteration == 1) $out .= "\n{$outer_tpl[0]}";
			else if( count($children) ) $out .= "\n$inner_tpl[0]";

		foreach($children as $key => $child) {

			$s = '';
			$class = '';
			$is_root = ($child === $rootPage) ? true : false;
			$level = $is_root ? 1 : count($child->parents) - $offset;
			$stopit = ($options['max_levels'] != null && $level >= $options['max_levels']) ? true : false;
			$has_valid_children = (count($child->children($options['selector'])) && !$stopit) ? true : false;
			$is_parent = $parents->has($child);
			$is_current = $child === $page;

			if($options['levels']) $class = " " . $options['levels_prefix'] . $level;
				else $class = '';

			if($options['firstlast']) {
				if($key == 0) $class .= " first";
				if($key == (count($children) - 1 )) $class .= " last";
			}

			// generate an "all open" tree structure
			if(!$options['collapsed']) {
				if($is_parent && !$is_root) {
					$class .= " " . $options['parent_class'];
				}
				else if($is_current){
					$class .= " " . $options['current_class'];
				}
				if($has_valid_children && !$is_root && !$stopit){
					$s = str_replace("\n", "\n\t\t", $this->_renderTree($options, $page, $child, $offset));
					// to maintain interation count for correct outer_tpl
					$this->iteration--;
				}
			}
			// if auto collapse enabled only open current branch
			else
			{
				if($has_valid_children && $is_parent && !$is_root) {
					$class .= " " . $options['parent_class'];
					if(!$stopit) {
						$s = str_replace("\n", "\n\t\t", $this->_renderTree($options, $page, $child, $offset));
						// to maintain interation count for correct outer_tpl
						$this->iteration--;
					}
				}
				else if($is_parent && !$is_root) {
					// make sure parent class gets added to current parents
					$class .= " " . $options['parent_class'];
				}
				else if($is_current) {
					$class .= " " . $options['current_class'];
					if($has_valid_children && !$is_root && !$stopit) {
						$s = str_replace("\n", "\n\t\t", $this->_renderTree($options, $page, $child, $offset));
						// to maintain interation count for correct outer_tpl
						$this->iteration--;
					}
				}
			}

			// append has_children only if there's a need to ( if exluded throu selector or max_levels)
			// still not sure how to behave, if one wants to still output "has_children" even if max_levels on
			if($has_valid_children && !$is_root) {
				$class .= " " . $options['has_children_class'];
			}

			if($options['list_field_class']){
				$class .= " " . $this->getTagsString($options['list_field_class'], $child);
			}



			// if current page, get current item tpl else we use the non-current
			if($is_current) {
				if($child->is("template=".$options['xtemplates']))
				   	$link_tpl = $options['xitem_current_tpl'];
				  	else $link_tpl = $options['item_current_tpl'];
			} else {
				if($child->is("template=".$options['xtemplates']))
					$link_tpl = $options['xitem_tpl'];
					else $link_tpl = $options['item_tpl'];
			}

			// template field tags matching
			$link_tpl = $this->getTagsString($link_tpl, $child);
			$class = $this->getListClass($class, $child);

			// remove first space char
			$class = substr($class,1);
			if(strlen($class) > 0) {
				$class = ' class="' . $class . '"';
			}

			$list_tpl_open = str_replace("%s", $class, $list_tpl[0]);

			$out .= "\n\t{$list_tpl_open}{$link_tpl}{$s}{$list_tpl[1]}";
		}

		// output closing outer tpl wrapper only on first iteration
		if($this->iteration == 1) $out .= "\n{$outer_tpl[1]}";
			else if( count($children) ) $out .= "\n$inner_tpl[1]\n";

		return $out;
	}

	public function ___getTagsString($tpl, $page){
		// template field tags matching
		preg_match_all('#\{(.+?)\}#i', $tpl, $matches, PREG_SET_ORDER);

		if(count($matches)){
			foreach($matches as $match) {

				$f = $page->get($match[1]);

				// check if it's an image file field and output url
				if($f instanceof Pageimage) {
					$field_value = $f->url;
				} else if($f instanceof Pageimages) {
					if(count($f)) $field_value = $f->first()->url;
						else $field_value = '';
				}
				// if page object from a page field get its url
				else if($f instanceof Page){
					$field_value = $f->url;
				} else {
					$field_value = $f;
				}
				$tpl = str_replace($match[0], $field_value, $tpl);
			}
		}
		return $tpl;
	}

	/**
	 * hook method to add custom classes to entries
	 */
	public function ___getListClass($class, $page) {
		return $class;
	}

}
