<?php

/**
 * ProcessWire Modules Manager
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ModulesManager extends Process implements ConfigurableModule {

	protected static $defaults = array(
			'apikey' => "pw223",
			'remoteurl' => "http://modules.processwire.com/export-json/",
			'limit' => 200
		);

	protected $exclude_categories = array(
		'language-pack' => 'Language Packs',
		'admin-theme' => 'Admin Themes'
		);
	protected $modulesArray = array();
	protected $modulesRemoteArray = array();
	protected $cacheFile = "ModuleManager.cache";
	protected $downloadFileName = "ModuleManagerDownload.zip";

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Modules Manager',
			'version' => 101,
			'summary' => 'Browse Modules posted from modules.processwire.com. Download, update or install them',
			'href' => '',
			'singular' => true,
			'autoload' => false
			);
	}

	/**
	 * get the config either default or overwritten by user config
	 * @param  string $key name of the option
	 * @return mixed      return requested option value
	 */
	public function getConfig($key) {
		return ($this->get($key)) ? $this->get($key) : self::$defaults[$key];
	}

	/**
	 * this method is called when ProcessWire is read and loaded the module
	 * used here to get scripts and css files loaded automaticly
	 * @return module returns parent init
	 */
	public function init() {
		return parent::init();
	}

	/**
	 * used internally for the module to convert version numbers of the modules
	 * @param  int $version version number | major minor revision
	 * @return string          returns string formatted version number
	 */
	protected function formatVersion($version) {
		return preg_replace('/(\d)(?=\d)/', '$1.', str_pad("$version", 3, "0", STR_PAD_LEFT));
	}

	/**
	 * Default process function when the page is loaded without segments
	 *
	 * @return string output html string
	 */
	public function execute() {
		// check if we have the rights to download files from other domains
		// using copy or file_get_contents
		if(!ini_get("allow_url_fopen")) {
			$this->error($this->_("The php config 'allow_url_fopen' is disabled on the server, modules can't be donwloaded through Modules Manages. Enable it or ask your hosting support then try again."));
		}

		// check if directories are writeable
		if(!is_writable($this->config->paths->assets)) {
			$this->error($this->_("Make sure your /site/assets directory is writeable by php."));
		}
		if(!is_writable($this->config->paths->siteModules)) {
			$this->error($this->_("Make sure your /site/modules directory is writeable by php."));
		}

		// construct the cache file path for json feed
		$cachefile = $this->config->paths->cache . $this->cacheFile;

		// reset cache to scan for new modules downloaded, manually
		// put into site modules folder and donwload current json feed
		if($this->input->get->reset) {
			// reset PW modules cache
			$this->modules->resetCache();
			// json feed download and cache
			$this->createCacheFile($cachefile);
			// reload page without params
			$this->session->redirect("./");
		}

		// get json module feed cache file,
		// if not yet cached download and cache it
		if(file_exists($cachefile)){
			$this->modulesRemoteArray = $this->readCacheFile($cachefile);
		} else {
			$this->modulesRemoteArray = $this->createCacheFile($cachefile);
		}

		// get current installed modules in PW and store it in array
		// for later use to generate
		foreach($this->modules as $module) {
			$this->modulesArray[$module->className()] = 1;
		}
		// get current uninstalled modules with flag 0
		foreach($this->modules->getInstallable() as $module) {
			$this->modulesArray[basename($module, '.module')] = 0;
		}

		$out = '';

		// start output of module list
		$moduletbl = wire('modules')->get('MarkupAdminDataTable');
		$moduletbl->setEncodeEntities(false);
		$header = array(
			$this->_("name"),
			$this->_("infos"),
			$this->_("release"),
			$this->_("version"),
			$this->_("class name"),
			$this->_("categories"),
			$this->_("author(s)"),
			$this->_("modified"),
			$this->_("status"),
			$this->_("action")
		);

		$moduletbl->headerRow($header);

		$count = 0;
		$all_categories = array();

		// loop the module list we got from the json feed and we do
		// various checks here to see if it's uptodate or installed
		foreach($this->modulesRemoteArray->items as $key => $module) {

			$categories = array();

			foreach($module->categories as $cat) $categories[$cat->name] = $cat->title;
			$all_categories = array_merge($all_categories, $categories);

			// exclude modules
			$hide = false;
			// filter out unwanted categories
			foreach($this->exclude_categories as $key => $exc) {
				if(array_key_exists($key,$categories)){
					$hide = true;
					break;
				}
			}
			// filter for selected category
			if( isset(wire('input')->get->cat) ) {
				$selected_cat = wire('input')->get->cat;
				if($selected_cat){
					if(!array_key_exists(wire('input')->get->cat, $categories)) {
						$hide = true;
					}
				}
			}

			// if filtered out no need to go any further in the loop
			if($hide) continue;
			$count++;


			$authors = array();
			foreach($module->authors as $auth) $authors[] = $auth->title;

			$status = '<span>-</span>';
			$version = '-';
			$actions = '-';

			$remote_version = $this->formatVersion($module->module_version);

			if(array_key_exists($module->class_name, $this->modulesArray)) {
				// get module infos, we can't use modules->get(modulename) here
				// as it would install the module, which we don't want at all
				$infos = wire("modules")->getModuleInfo($module->class_name);
				$local_version = $this->formatVersion($infos['version']);

				if($this->modulesArray[$module->class_name] == 0) {
					$status = 'found: ' . $local_version;
					$actions = "<button type='submit' id='install_$module->class_name' name='install' class='install' value='$module->class_name'>" . $this->_x('install', 'button') . "</button>";
				} else {
					if($remote_version > $local_version) {
						$status = '<span class="ui-state-installed">installed: '.$local_version.'</span><br/>';
						$status .= "<span class='ui-state-update'>new version available!</span><br/>";
						$actions = "<a href='./download/?url={$module->download_url}&class={$module->class_name}'>update</a>";
					} else{
						$status = '<span class="ui-state-installed">installed: '.$local_version.'</span>';
						$actions = "<a href='{$this->pages->get(21)->url}edit?name={$module->class_name}'>edit</a>";
					}
				}
			} else {
				$actions = "<a href='./download/?url={$module->download_url}&class={$module->class_name}'>download</a>";
			}

			//$this->modules->isInstalled($class_name);

			$moduletbl->row(array(
				"<b class='mname' title='$module->summary'>" . $module->title . "</b>",
				"<a href='{$module->url}' target='_blank' class='icon' title='more infos'><span class='ui-icon ui-icon-info hoverdescr' id='{$module->name}'></span></a>",
				$module->release_state->title,
				$remote_version,
				$module->class_name,
				implode(", ", $categories),
				implode(", ", $authors),
				date("Y/m/d", $module->modified),
				$status,
				$actions
			));

		}


		// build form
		$form = $this->modules->get('InputfieldForm');
		$form->attr('action', $this->pages->get(21)->url);
		$form->attr('method', 'post');
		$form->attr('id', 'modules_form');

		// refresh button
		$submit = $this->modules->get('InputfieldButton');
		$submit->attr('href', './?reset=1');
		$submit->attr('name', 'reset');
		$submit->attr('value', $this->_('refresh'));
		$submit->attr('class', $submit->attr('class') . ' head_button_clone');
		$form->add($submit);

		$out .= $moduletbl->render();
		// add table and button to form field wrapper
		$form->attr('value', $out);

		// category select filter
		$catsform = $this->modules->get('InputfieldForm');
		$catsform->attr('action', "./");
		$catsform->attr('method', 'get');
		$catsform->attr('id', 'modules_filter_form');

		// category select
		$cats = $this->modules->get("InputfieldSelect");
		$cats->attr('id+name', 'cat');
		$cats->label = 'Filter categories';
		$all_categories = array_merge($all_categories, array('' => ''));
		$all_categories = array_diff($all_categories, $this->exclude_categories);
		ksort($all_categories);
		$cats->addOptions($all_categories);
		$cats->value = wire('input')->get->cat; // selected the current requested GET
		$cats->attr('onchange', 'submit()');
		$catsform->append($cats);

		$pretext = "<p>Modules found on modules.processwire.com (".$count.") </p>";
		return $pretext . $catsform->render() . $form->render();
	}


	private function createCacheFile($cachefile) {
		$contents = file_get_contents($this->getConfig('remoteurl') . "?apikey=" . $this->getConfig("apikey") . "&limit=" . $this->getConfig("limit"));
		if(!$handle = fopen($cachefile, "w")) throw new WireException("cannot create cachefile $cachefile");
		if(!fwrite($handle, $contents)) throw new WireException("cannot write cachefile $cachefile");
		fclose($handle);
		return json_decode($contents);
	}


	private function readCacheFile($cachefile) {
		if(!$handle = fopen($cachefile, "r")) throw new WireException("cannot open cachefile $cachefile");
		if(!$contents = fread($handle, filesize($cachefile))) throw new WireException("cannot read cachefile $cachefile");
		fclose($handle);
		return json_decode($contents);
	}


	public function executeDownload() {

		$this->modules->resetCache();

		$url = $this->input->get->url;
		$class_name = $this->input->get->class;

		$tmp_dir = $this->config->paths->assets;
		$tmp_zip = $tmp_dir . $this->downloadFileName;

		if(!is_writable($this->config->paths->assets)) $this->error($this->_("Make sure assets directory is writeable for php."));
		if(!is_writable($this->config->paths->siteModules)) $this->error($this->_("Make sure your site modules directory is writeable for php."));

		// download the zip file and save it in assets directory
		if($file = $this->downloadFile($url, $tmp_zip)) {
			$this->message("Downloaded .zip successfully from $url");
			// if successfully downloaded ectract it
			$zip = new ZipArchive;
			if($zip->open($file) === true) {
				for($i = 0; $i < $zip->numFiles; $i++) {
					$zip->extractTo($tmp_dir, array($zip->getNameIndex($i)));
				}
				$extracted_dirname = trim($zip->getNameIndex(0),"/");
				$zip->close();
			} else {
				throw new WireException("Could not open zip file");
			}
			// now create module directory and copy files over
			$module_dir = $this->config->paths->siteModules . $class_name;
			if($this->createModuleDirectory($module_dir)) {
				if($this->recursiveCopy($tmp_dir . $extracted_dirname . "/" , $module_dir)) {
					$this->message("Copied files successfully to module directory $module_dir");
					$success = true;
				}
			} else {
				$this->error("Could not create directory $module_dir");
			}

			if(!unlink($tmp_zip)) throw new WireException("Could not delete downloaded zip file $tmp_zip");
			if(!$this->removeDir($tmp_dir . $extracted_dirname)) throw new WireException("Could not delete downloaded temporary files {$tmp_dir}{$extracted_dirname}");
		}

		if($success) {

			// reset modules cache, so we can install the module and PW knows about it
			$this->modules->resetCache();

			// check if modules isn't already installed and this isn't an update
			if(!$this->modules->isInstalled($class_name)) {
				$this->fuel->set("processHeadline", "You just downloaded $class_name");
				$text = "<p>" . $this->_('Module downloaded and extracted sucessfully. You can install it directly from here or any time later on the Modules admin page.') . "</p>";
				$form = $this->modules->get('InputfieldForm');
				$form->attr('action', $this->pages->get(21)->url );
				$form->attr('method', 'post');
				$form->attr('id', 'modules_form');

				$field = "<input type='hidden' name='install' value='$class_name'/>";
				$form->value .= $field;

				$submit = $this->modules->get('InputfieldSubmit');
				$submit->attr('name', 'submit');
				$submit->attr('value', $this->_('install module'));
				$form->add($submit);
				$text .= $form->render();
			} else {
				$this->fuel->set("processHeadline", "You just updated $class_name");
				$text = "<p>" . $this->_("Module was updated sucessfully. Ready to check if everything still works! Or there's possibly new options.") . " Module: <a href='{$this->pages->get(21)->url}edit?name={$class_name}'>$class_name</a></p>";"";
			}
			return $text;

		} else {
			return "<p>" . $this->_('There seems to be a problem with downloading or writing the module.') . "</p>";
		}
	}

	private function downloadFile($url, $fileName) {

		// Define the options
		$options = array('max_redirects' => 2 );
		$context = stream_context_create(array('http' => $options));
		if(!$content = file_get_contents($url, $fileName, $context)) {
			$this->error("File could not be downloaded $url");
			return false;
		} else {
			if(($fp = fopen($fileName, "wb")) === false) {
				$this->error("fopen error for filename $fileName");
				return false;
			} else {
				fwrite($fp, $content);
				fclose($fp);
				return $fileName;
			}
		}
		return $fileName;
	}

	// protected static $options = array(
	// 	CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; pl; rv:1.9) Gecko/2008052906 Firefox/13.0',
	// 	CURLOPT_AUTOREFERER => true,
	// 	CURLOPT_COOKIEFILE => '',
	// 	CURLOPT_FOLLOWLOCATION => true
	// );

	// private function downloadFileCurl($url, $fileName) {
	// 	if (($curl = curl_init($url)) == false) {
	// 		$this->error("curl_init error for url $url.");
	// 		$this->error("File could not be downloaded $url");
	// 		return false;
	// 	}
	// 	curl_setopt_array($curl, self::$options);
	// 	if (substr($fileName, -1) == '/') {
	// 		$targetDir = $fileName;
	// 		$fileName = tempnam(sys_get_temp_dir(), 'c_');
	// 	}
	// 	if (($fp = fopen($fileName, "wb")) === false) {
	// 		$this->error("fopen error for filename $fileName");
	// 		return false;
	// 	}

	// 	curl_setopt($curl, CURLOPT_FILE, $fp);
	// 	curl_setopt($curl, CURLOPT_BINARYTRANSFER, true);

	// 	if (curl_exec($curl) === false) {
	// 		fclose($fp);
	// 		unlink($fileName);
	// 		$this->error("curl_exec error for url $url.");
	// 		return false;
	// 	} elseif (isset($targetDir)) {
	// 		$eurl = curl_getinfo($curl, CURLINFO_EFFECTIVE_URL);
	// 		preg_match('#^.*/(.+)$#', $eurl, $match);
	// 		fclose($fp);
	// 		rename($fileName, "$targetDir{$match[1]}");
	// 		$fileName = "$targetDir{$match[1]}";
	// 	} else {
	// 		fclose($fp);
	// 		return $fileName;
	// 	}
	// 	curl_close($curl);
	// 	return $fileName;
	// }

	private function recursiveCopy($dirsource, $dirdest){
		// recursive function to copy
		// all subdirectories and contents:
		if(is_dir($dirsource)) $dir_handle = opendir($dirsource);
		$dirname = substr($dirsource,strrpos($dirsource,"/")+1);

		wireMkdir($dirdest . "/" . $dirname);
		while($file = readdir($dir_handle)) {
			if($file != "." && $file != "..") {
				if(!is_dir($dirsource . "/" . $file)) copy ($dirsource . "/" . $file, $dirdest . $dirname . "/" .$file);
				else {
					$dirdest1 = $dirdest . $dirname . "/";
					$this->recursiveCopy($dirsource . "/" . $file, $dirdest1);
				}
			}
		}
		closedir($dir_handle);
		return true;
	}

	private function createModuleDirectory($dir){
		if(!file_exists($dir)) {
			if(!wireMkdir($dir)) {
				$this->error("error creating module directory at: $dir");
				return false;
			} else {
				return true;
			}
		} else {
			return true;
		}
	}

	private function removeDir($dir){
		foreach(scandir($dir) as $file) {
			if($file === '.' || $file === '..') continue;
			if(is_dir($dir ."/". $file)) {
				$this->removeDir($dir ."/". $file);
			} else{
				if(!unlink($dir ."/". $file)) throw new WireException("Could not remove file $file");
			}
		}
		if(!rmdir($dir)) throw new WireException("Could not remove directory $dir");
		return true;
	}

	public function install() {
		// page already found for some reason
		if(count($this->pages->find("name=".__CLASS__))) return;
		$p = new Page();
		$p->template = $this->templates->get("admin");
		$p->title = __CLASS__;
		$p->name = __CLASS__;
		$p->parent = $this->pages->get(22);
		$p->process = $this;
		$p->save();
	}

	public function uninstall() {
		$found = $this->pages->find("name=".__CLASS__)->first();
		if(count($found)) $found->delete();
		$cachefile = $this->config->paths->cache . $this->cacheFile;
		if(file_exists($cachefile)) {
			if(!unlink($cachefile)) throw new WireException("Could not delete cache file $cachefile");
			else $this->message("Cache file deleted successfully $cachefile");
		}

	}

	static public function getModuleConfigInputfields(array $data) {
		$data = array_merge(self::$defaults, $data);

		$fields = new InputfieldWrapper();
		$modules = wire("modules");

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'apikey');
		$field->attr('size', 10);
		$field->attr('value', $data['apikey']);
		// $field->set("collapsed",Inputfield::collapsedHidden);
		$field->label = "modules.processwire.com APIkey";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'remoteurl');
		$field->attr('size', 0);
		$field->attr('value', $data['remoteurl']);
		$field->label = "URL to webservice";
		$fields->append($field);

		$field = $modules->get("InputfieldInteger");
		$field->attr('name', 'limit');
		$field->attr('value', $data['limit']);
		$field->label = "Limit";
		$fields->append($field);

		return $fields;
	}
}
